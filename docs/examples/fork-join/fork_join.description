// In a function execution, a fork-join statement splits the current execution to multiple workers, which do their work in
// parallel, and joins the executions together to process their results.
// The `fork` block allows you to start any number of parallel workers at once.
// The `join` block gets the results from the workers that are running in parallel.
// You can make the `join` block wait for all the workers to finish their execution using the `all`
// condition, wait for a specific number of workers to finish execution, or provide a time-out for joining the workers.
// Once the `join` block receives the required results, you can define how you want to use the results.
